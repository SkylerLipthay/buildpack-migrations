#!/usr/bin/env bash

#Heroku passes in these arguments
current_path=$0
build_dir=$1
cache_dir=$2
env_dir=$3

#Load environment variables that may be needed to boot rails.
if [ -d "$env_dir" ]; then
  blacklist_regex=${4:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  for e in $(ls -1 $env_dir | grep -vE "$blacklist_regex"); do
    export "$e=$(cat $env_dir/$e)"
  done
fi

migrations_done=(`psql ${DATABASE_URL} --command="SELECT * FROM schema_migrations ORDER BY version DESC" --tuples-only`)

known=(`ls ${build_dir}/db/migrate`)

run_migrations=false

for i in "${known[@]}"; do
  num=`echo ${i} | awk -F "_" '{print $1}'`
  if  ! [[ " ${migrations_done[@]} " =~ " ${num} " ]]; then
    run_migrations=true
  fi
done

if [[ run_migrations -eq true ]]; then
  # In a Rails 3 app, it dumps schema with `-i`, which has been removed pg_dump
  # Dumping the DB structure is kind of pointless as part of the Heroku build 
  # process anyway, so just no-op it:
  ln -s $(which true) /tmp/pg_dump
  
  cd $build_dir && \
    PATH="/tmp:$PATH" RAILS_ENV="${RAILS_ENV:-production}" bundle exec rake db:migrate
  if [ $? -eq 1 ]; then
    echo "There was an error running migrations. Deploy halted."
    exit 1
  fi
else
  echo "Not running migrations. No pending migrations found."
fi
